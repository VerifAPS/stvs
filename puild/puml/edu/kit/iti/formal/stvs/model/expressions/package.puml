@startuml

    namespace edu.kit.iti.formal.stvs.model.expressions {

        class TypeCheckException {
            {static} -serialVersionUID: long
            +TypeCheckException(mistypedExpression:Expression, message:String)
        }

        interface Value {
            {abstract} +match(matchInt:IntFunction<R>, matchBoolean:Function<Boolean, R>, matchEnum:Function<ValueEnum, R>): R
        }

        class TypeEnum {
            -enumTypeName: String
            -valueMap: Map<String, ValueEnum>
            +TypeEnum(enumTypeName:String, values:List<String>)
            +match(matchIntType:Supplier<R>, matchBoolType:Supplier<R>, matchEnumType:Function<TypeEnum, R>): R
            +checksAgainst(other:Type): boolean
            +getTypeName(): String
            +valueOf(enumName:String): ValueEnum
        }

        class TypeFactory {
            {static} +INT: TypeInt
            {static} +BOOL: TypeBool
            {static} +enumOfName(name:String, values:String[]): TypeEnum
        }

        class LiteralExpr {
            +LiteralExpr(val:Value)
            +takeVisitor(visitor:ExpressionVisitor<R>): R
        }

        class ValueEnum {
            -enumValue: String
            +ValueEnum(enumValue:String, enumType:TypeEnum)
            +match(matchInt:IntFunction<R>, matchBoolean:Function<Boolean, R>, matchEnum:Function<ValueEnum, R>): R
            +getEnumValue(): String
        }

        class VariableExpr {
            -varName: String
            +VariableExpr(varName:String)
            +takeVisitor(visitor:ExpressionVisitor<R>): R
            +getVariableName(): String
        }

        abstract class Expression {
            {abstract} +takeVisitor(visitor:ExpressionVisitor<R>): R
        }

        interface Type {
            {abstract} +match(matchIntType:Supplier<R>, matchBoolType:Supplier<R>, matchEnumType:Function<TypeEnum, R>): R
            {abstract} +checksAgainst(other:Type): boolean
            {abstract} +getTypeName(): String
        }

        class ValueBool {
            -value: boolean
            +ValueBool(value:boolean)
            +match(matchInt:IntFunction<R>, matchBoolean:Function<Boolean, R>, matchEnum:Function<ValueEnum, R>): R
        }

        class TypeInt {
            +match(matchIntType:Supplier<R>, matchBoolType:Supplier<R>, matchEnumType:Function<TypeEnum, R>): R
            +checksAgainst(other:Type): boolean
            +getTypeName(): String
        }

        class ExpressionParser {
        }

        class ValueInt {
            -value: int
            +ValueInt(value:int)
            +match(matchInt:IntFunction<R>, matchBoolean:Function<Boolean, R>, matchEnum:Function<ValueEnum, R>): R
        }

        interface ExpressionVisitor<R> {
            {abstract} +visitFunctionExpr(functionExpr:FunctionExpr): R
            {abstract} +visitLiteral(literalExpr:LiteralExpr): R
            {abstract} +visitVariable(variableExpr:VariableExpr): R
        }

        class TypeBool {
            +match(matchIntType:Supplier<R>, matchBoolType:Supplier<R>, matchEnumType:Function<TypeEnum, R>): R
            +checksAgainst(other:Type): boolean
            +getTypeName(): String
        }

        class FunctionExpr {
            +FunctionExpr(op:FunctionExpr.Operation, arguments:List<Expression>)
            +takeVisitor(visitor:ExpressionVisitor<R>): R
        }

        enum edu.kit.iti.formal.stvs.model.expressions.FunctionExpr.Operation {
            {static} +AND
            {static} +OR
            {static} +EQUALS
            {static} +PLUS
            {static} +MINUS
            {static} +MULTIPLICATION
            {static} +DIVISION
        }

        class TypeChecker {
            -variableTypeContext: Map<String, Type>
            +TypeChecker(variableTypeContext:Map<String, Type>)
            +typeCheck(expr:Expression): Type
            +visitFunctionExpr(functionExpr:FunctionExpr): Type
            +visitLiteral(literalExpr:LiteralExpr): Type
            +visitVariable(variableExpr:VariableExpr): Type
        }

        class java.lang.Exception
        java.lang.Exception <|-- TypeCheckException

        Type <|.. TypeEnum

        Expression <|-- LiteralExpr

        Value <|.. ValueEnum

        Expression <|-- VariableExpr

        Value <|.. ValueBool

        Type <|.. TypeInt

        Value <|.. ValueInt

        Type <|.. TypeBool

        Expression <|-- FunctionExpr

        FunctionExpr +-- edu.kit.iti.formal.stvs.model.expressions.FunctionExpr.Operation

        ExpressionVisitor <|.. TypeChecker

        TypeCheckException --> Expression: mistypedExpression

        Value --> Type: type

        LiteralExpr --> Value: value

        ValueEnum --> TypeEnum: enumType

        ValueEnum --> Type: type

        ValueBool --> Type: type

        ValueInt --> Type: type

        FunctionExpr --> edu.kit.iti.formal.stvs.model.expressions.FunctionExpr.Operation: operation

        FunctionExpr --> "*" Expression: arguments

    }

@enduml
