@startuml

    namespace edu.kit.iti.formal.stvs.model.code {

        class SourcecodeToken {
            -text: String
            +SourcecodeToken(text:String, type:SourcecodeToken.Type)
            +getText(): String
        }

        enum edu.kit.iti.formal.stvs.model.code.SourcecodeToken.Type {
            {static} +NUMBER
            {static} +STRING
            {static} +KEYWORD
            {static} +COMMENT
            {static} +OTHER
        }

        class ParsedCode {
        }

        class Code {
            -changeListeners: List<Consumer<Code>>
            -ioVariableListeners: List<Consumer<List<IOVariable>>>
            -typeListeners: List<Consumer<List<Type>>>
            -parsedCodeListeners: List<Consumer<ParsedCode>>
            -lexedCodeListeners: List<Consumer<List<SourcecodeToken>>>
            -filename: String
            -sourcecode: String
            +Code()
            +Code(filename:String, sourceCode:String)
            +getFilename(): String
            +setFilename(): void
            +getSourcecode(): String
            +lexCode(): List<SourcecodeToken>
            +addSourcecodeListener(listener:Consumer<String>): void
            +addIOVariablesListener(ioVariablesListener:Consumer<List<IOVariable>>): void
            +addParsedCodeListener(parsedCodeListener:Consumer<ParsedCode>): void
            +addLexedCodeListener(lexed:Consumer<List<SourcecodeToken>>): void
            +addTypesListener(types:Consumer<List<Type>>): void
            +setSourcecode(sourcecode:String): void
        }

        class FoldableCodeBlock {
            -startLine: int
            -endLine: int
            +getStartLine(): int
            +getEndLine(): int
        }

        SourcecodeToken +-- edu.kit.iti.formal.stvs.model.code.SourcecodeToken.Type

        SourcecodeToken --> edu.kit.iti.formal.stvs.model.code.SourcecodeToken.Type: type

        ParsedCode --> "*" FoldableCodeBlock: foldableCodeBlocks

        Code --> ParsedCode: parsedCode

        Code --> "*" SourcecodeToken: tokens

    }

@enduml
