@startuml

    namespace edu.kit.iti.formal.stvs.model.table.problems {

        class ParseErrorProblem {
            -column: VariableIdentifier
            -row: int
            +ParseErrorProblem(column:VariableIdentifier, row:int)
            +match(matchTypeError:Function<TypeErrorProblem, R>, matchInvalidIOVar:Function<InvalidIOVarProblem, R>, matchCyclicDependency:Function<CyclicDependencyProblem, R>, matchParseError:Function<ParseErrorProblem, R>, matchDurationProblem:Function<DurationProblem, R>): R
            +getColumn(): VariableIdentifier
            +getRow(): int
        }

        class TypeErrorProblem {
            -column: VariableIdentifier
            -row: int
            +TypeErrorProblem(column:VariableIdentifier, row:int)
            +match(matchTypeError:Function<TypeErrorProblem, R>, matchInvalidIOVar:Function<InvalidIOVarProblem, R>, matchCyclicDependency:Function<CyclicDependencyProblem, R>, matchParseError:Function<ParseErrorProblem, R>, matchDurationProblem:Function<DurationProblem, R>): R
            +getColumn(): VariableIdentifier
            +getRow(): int
        }

        class CyclicDependencyProblem {
            -row: int
            -cycle: List<VariableIdentifier>
            +CyclicDependencyProblem(row:int, cycle:List<VariableIdentifier>)
            +match(matchTypeError:Function<TypeErrorProblem, R>, matchInvalidIOVar:Function<InvalidIOVarProblem, R>, matchCyclicDependency:Function<CyclicDependencyProblem, R>, matchParseError:Function<ParseErrorProblem, R>, matchDurationProblem:Function<DurationProblem, R>): R
            +getRow(): int
            +getCycle(): List<VariableIdentifier>
        }

        class DurationProblem {
            -row: int
            +DurationProblem(row:int)
            +match(matchTypeError:Function<TypeErrorProblem, R>, matchInvalidIOVar:Function<InvalidIOVarProblem, R>, matchCyclicDependency:Function<CyclicDependencyProblem, R>, matchParseError:Function<ParseErrorProblem, R>, matchDurationProblem:Function<DurationProblem, R>): R
            +getRow(): int
        }

        class InvalidIOVarProblem {
            -column: VariableIdentifier
            +InvalidIOVarProblem(column:VariableIdentifier, type:InvalidIOVarProblem.Type)
            +match(matchTypeError:Function<TypeErrorProblem, R>, matchInvalidIOVar:Function<InvalidIOVarProblem, R>, matchCyclicDependency:Function<CyclicDependencyProblem, R>, matchParseError:Function<ParseErrorProblem, R>, matchDurationProblem:Function<DurationProblem, R>): R
            +getVariableIdentifier(): VariableIdentifier
        }

        enum edu.kit.iti.formal.stvs.model.table.problems.InvalidIOVarProblem.Type {
            {static} +INVALID_NAME
            {static} +INVALID_TYPE
        }

        abstract class SpecProblem {
            {abstract} +match(matchTypeError:Function<TypeErrorProblem, R>, matchInvalidIOVar:Function<InvalidIOVarProblem, R>, matchCyclicDependency:Function<CyclicDependencyProblem, R>, matchParseError:Function<ParseErrorProblem, R>, matchDurationProblem:Function<DurationProblem, R>): R
        }

        SpecProblem <|-- ParseErrorProblem

        SpecProblem <|-- TypeErrorProblem

        SpecProblem <|-- CyclicDependencyProblem

        SpecProblem <|-- DurationProblem

        SpecProblem <|-- InvalidIOVarProblem

        InvalidIOVarProblem +-- edu.kit.iti.formal.stvs.model.table.problems.InvalidIOVarProblem.Type

        InvalidIOVarProblem --> edu.kit.iti.formal.stvs.model.table.problems.InvalidIOVarProblem.Type: type

    }

@enduml
