<session xmlns="http://formal.iti.kit.edu/stvs/io/1.0/">
<code>
    <plaintext><![CDATA[
TYPE WorkpieceTypes_t : ( EXPRESS, NORMAL );
     Position_t       : (FIRST, SECOND, END);
     Error_t          : (NO_ERROR,
                         DOUBLE_WORKPIECE,
                         MISS_LIGHTBARRIER_1,
                         MISS_LIGHTBARRIER_2,
                         MISS_LIGHTBARRIER_3);
END_TYPE

PROGRAM ConveyorWithSorter
VAR_INPUT
	WeightSensorFront : INT;
	LightBarrier0, LightBarrier1, LightBarrier2, LightBarrier3 : BOOL;
	WorkpieceType : WorkpieceTypes_t;
END_VAR

VAR_OUTPUT
	MoveBelt : BOOL;
	Push1    : BOOL;
	Push2    : BOOL;
	ERROR    : Error_t;
END_VAR

VAR
	DesiredPosition   : Position_t;
	State             : INT;
	lowerTimeReached,
    upperTimeReached  : BOOL;
	P1Push, P2Push   : BOOL;
	Clock 			 : INT;
END_VAR

VAR CONSTANT
	(*TIMING_START_TO_LB1  : TIME := TIME#80MS;
	TIMING_LB1_TO_LB2    : TIME := TIME#20MS;
	TIMING_LB2_TO_LB3    : TIME := TIME#20MS;
	TIMING_LB3_TO_P1     : TIME := TIME#30MS;
	TIMING_P1_TO_P2      : TIME := TIME#30MS;
	TIMING_P2_TO_END     : TIME := TIME#50MS;
	DELAY                : TIME := TIME#20MS;*)

	TIMING_START_TO_LB1  : INT := 8;
	TIMING_LB1_TO_LB2    : INT := 2;
	TIMING_LB2_TO_LB3    : INT := 2;
	TIMING_LB3_TO_P1     : INT := 3;
	TIMING_P1_TO_P2      : INT := 3;
	TIMING_P2_TO_END     : INT := 5;
	DELAY                : INT := 2;

	LOWER_WEIGHT_LIMIT: INT := 1; //kg
	UPPER_WEIGHT_LIMIT: INT := 50; //kg
	BULKY_GOOD_WEIGHT : INT := 32;//kg
END_VAR

ERROR := NO_ERROR;

IF LightBarrier0 THEN
	IF State <> 0 THEN
		ERROR := DOUBLE_WORKPIECE;
		RETURN;
	END_IF

	IF LOWER_WEIGHT_LIMIT > WeightSensorFront THEN
		ERROR := WORKPIECE_TOO_LIGHT;
	ELSEIF WeightSensorFront > UPPER_WEIGHT_LIMIT THEN
		ERROR := WORKPIECE_TOO_HEAVY;
	END_IF

	State := 1;
	MoveBelt := TRUE;
	IF WeightSensorFront >= BULKY_GOOD_WEIGHT THEN
		P1Push := FALSE;
 		P2Push := FALSE;

	ELSIF WorkpieceType = WorkpieceTypes_t.EXPRESS THEN
		P1Push := TRUE;
 		P2Push := FALSE;
 	ELSE
		P1Push := FALSE;
 		P2Push := TRUE;
 	END_IF
END_IF

IF State = 0 THEN
    Clock := 0;
ELSE
    Clock := Clock + 1;
END_IF

(* Timer *)
lowerTimeReached := FALSE;
upperTimeReached := FALSE;

CASE State OF
	1: lowerTimeReached := TIMING_START_TO_LB1   <= Clock;
	   upperTimeReached := DELAY + TIMING_START_TO_LB1   <= Clock;
	2: lowerTimeReached := TIMING_LB1_TO_LB2     <= Clock;
       upperTimeReached := DELAY + TIMING_LB1_TO_LB2   <= Clock;
	3: lowerTimeReached := TIMING_LB2_TO_LB3     <= Clock;
	   upperTimeReached := DELAY + TIMING_LB2_TO_LB3   <= Clock;
	4: lowerTimeReached := TIMING_LB3_TO_P1      <= Clock;
	   //upperTimeReached := DELAY + TIMING_LB3_TO_P1   <= Clock;
	5: lowerTimeReached := TIMING_P1_TO_P2       <= Clock;
	   //upperTimeReached := DELAY + TIMING_P1_TO_P2   <= Clock;
	6: lowerTimeReached := TIMING_P2_TO_END      <= Clock;
	   //upperTimeReached := DELAY + TIMING_P2_TO_END   <= Clock;
END_CASE

CASE State OF
	0:  MoveBelt := FALSE;

	1:  IF lowerTimeReached AND LightBarrier1 THEN
			State := State + 1;
		END_IF

	2:  IF lowerTimeReached AND LightBarrier2 THEN
			State := 3;
		END_IF

	3:  IF lowerTimeReached AND LightBarrier3 THEN
			State := 4;
		END_IF

	4:	IF lowerTimeReached THEN
			Push1 := P1Push;
			State := 5;
		END_IF

	5:  IF lowerTimeReached THEN
			Push1 := P2Push;
			State := 6;
		END_IF

	6:  IF lowerTimeReached THEN
			State := 0;
		END_IF
END_CASE

IF upperTimeReached THEN
	ERROR := MISS_LIGHTBARRIER_1;
	State := 0;
END_IF

END_PROGRAM
    ]]></plaintext>
</code>
    <tabs>
        <tab id="1" open="true" readOnly="false">
            <specification isConcrete="false">
                <variables>

                </variables>
            </specification>
        </tab>
    </tabs>
</session>